<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Movie Database Explorer</title>
  <link rel="stylesheet" href="/css/style.css">
  <script src="/js/vendor/alpine.min.js" defer></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&family=Orbitron:wght@400;700;900&display=swap" rel="stylesheet">
</head>
<body x-data="movieApp()" x-init="init()" :class="{ 'dark': isDark }">
  <div x-show="isLoading" x-transition class="loading-overlay">
    <div class="loading-terminal">
      <div class="loading-header">
        <span>SYSTEM://LOADING</span>
        <div class="loading-dots"><span></span><span></span><span></span></div>
      </div>
      <div class="loading-bar">
        <div class="loading-progress"></div>
      </div>
    </div>
  </div>

  <div class="main-container">
    <header class="header">
      <div class="header-content">
        <h1 class="logo">
          <span class="logo-prefix">MDB://</span>
          <span class="logo-main">EXPLORER</span>
          <span class="logo-version">v2.0</span>
        </h1>
        <div class="header-controls">
          <div class="stats-display">
            <span class="stat-item">
              <span class="stat-label">ENTRIES:</span>
              <span class="stat-value" x-text="allMovies.length"></span>
            </span>
            <span class="stat-item">
              <span class="stat-label">FILTERED:</span>
              <span class="stat-value" x-text="movies.length"></span>
            </span>
          </div>
          <button @click="currentView = (currentView === 'movies' ? 'statistics' : 'movies')" class="theme-toggle">
            <span x-show="currentView === 'movies'">[STATISTICS]</span>
            <span x-show="currentView === 'statistics'">[MOVIE_LIST]</span>
          </button>
          <button @click="isDark = !isDark" class="theme-toggle">
            <span x-show="!isDark">[DARK_MODE]</span>
            <span x-show="isDark">[LIGHT_MODE]</span>
          </button>
        </div>
      </div>
    </header>

    <%= render :_movie_modal %>

    <main x-show="!selectedMovie">
      <%= render :_movie_list %>
      <%= render :_statistics %>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <span>MDB://EXPLORER v2.0</span>
        <span class="footer-separator">|</span>
        <span>DATABASE_ENTRIES: <span x-text="allMovies.length"></span></span>
        <span class="footer-separator">|</span>
        <span>SYSTEM_STATUS: [ONLINE]</span>
      </div>
    </footer>
  </div>

  <script>
    document.addEventListener('alpine:init', () => {
      Alpine.data('movieApp', () => ({
        isDark: localStorage.getItem('isDark') === 'true',
        movies: [],
        allMovies: [],
        genres: [],
        countries: [],
        languages: [],
        franchises: [],
        selectedMovie: null,
        selectedPerson: null,
        searchQuery: '',
        selectedGenre: '',
        selectedCountry: '',
        selectedLanguage: '',
        selectedFranchise: '',
        selectedYear: '',
        sortBy: 'name',
        sortOrder: 'asc',
        activeTab: 'general',
        isLoading: true,
        viewMode: 'grid',
        currentPage: 1,
        moviesPerPage: 24,
        showFilters: false,
        statistics: null,
        currentView: 'movies',

        init() {
          this.isDark = localStorage.getItem('isDark') === 'true' || false;
          this.$watch('isDark', val => localStorage.setItem('isDark', val));

          Promise.all([
            fetch('/api/movies').then(res => res.json()),
            fetch('/api/genres').then(res => res.json()),
            fetch('/api/countries').then(res => res.json()),
            fetch('/api/languages').then(res => res.json()),
            fetch('/api/franchises').then(res => res.json()),
            fetch('/api/statistics').then(res => res.json())
          ]).then(([movies, genres, countries, languages, franchises, statistics]) => {
            this.allMovies = movies;
            this.movies = movies;
            this.genres = genres;
            this.countries = countries;
            this.languages = languages;
            this.franchises = franchises;
            this.statistics = statistics;
            this.isLoading = false;
            this.router();
          }).catch(err => {
            console.error('Failed to load data:', err);
            this.isLoading = false;
          });

          window.addEventListener('hashchange', () => this.router());
        },

        router() {
          const hash = window.location.hash;
          this.clearFilters(false);
          if (hash.startsWith('#/movie/')) {
            const id = hash.substring(8);
            if (!this.selectedMovie || this.selectedMovie.movie_id != id) {
              this.fetchMovie(id);
            }
          } else if (hash.startsWith('#/person/')) {
            const id = hash.substring(9);
            if (!this.selectedPerson || this.selectedPerson.person_id != id) {
              this.fetchPerson(id);
            }
          } else if (hash.startsWith('#/genre/')) {
            this.selectedGenre = decodeURIComponent(hash.substring(8));
            this.filterAndSortMovies();
            this.closeAllModals();
          } else if (hash.startsWith('#/country/')) {
            this.selectedCountry = decodeURIComponent(hash.substring(10));
            this.filterAndSortMovies();
            this.closeAllModals();
          } else if (hash.startsWith('#/language/')) {
            this.selectedLanguage = decodeURIComponent(hash.substring(11));
            this.filterAndSortMovies();
            this.closeAllModals();
          } else if (hash.startsWith('#/year/')) {
            this.selectedYear = decodeURIComponent(hash.substring(7));
            this.filterAndSortMovies();
            this.closeAllModals();
          } else if (hash.startsWith('#/franchise/')) {
            this.selectedFranchise = decodeURIComponent(hash.substring(12));
            this.filterAndSortMovies();
            this.closeAllModals();
          } else {
            this.closeAllModals();
          }
        },

        filterAndSortMovies() {
          let filtered = this.allMovies.filter(movie => {
            const matchesSearch = !this.searchQuery ||
              movie.movie_name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
              (movie.original_title && movie.original_title.toLowerCase().includes(this.searchQuery.toLowerCase()));
            const matchesGenre = !this.selectedGenre || (movie.genres || []).includes(this.selectedGenre);
            const matchesCountry = !this.selectedCountry || (movie.countries || []).includes(this.selectedCountry);
            const matchesLanguage = !this.selectedLanguage || (movie.languages || []).includes(this.selectedLanguage);
            const matchesFranchise = !this.selectedFranchise || movie.franchise_id == this.selectedFranchise;
            const matchesYear = !this.selectedYear || (movie.release_date && new Date(movie.release_date).getFullYear() == this.selectedYear);
            return matchesSearch && matchesGenre && matchesCountry && matchesLanguage && matchesFranchise && matchesYear;
          });

          filtered.sort((a, b) => {
            let aVal, bVal;
            switch(this.sortBy) {
              case 'name':
                aVal = a.movie_name.toLowerCase();
                bVal = b.movie_name.toLowerCase();
                break;
              case 'date':
                aVal = a.release_date || '0000-00-00';
                bVal = b.release_date || '0000-00-00';
                break;
              case 'rating':
                aVal = a.rating || 0;
                bVal = b.rating || 0;
                break;
              case 'runtime':
                aVal = a.runtime_minutes || 0;
                bVal = b.runtime_minutes || 0;
                break;
            }
            if (this.sortOrder === 'asc') {
              return aVal > bVal ? 1 : -1;
            } else {
              return aVal < bVal ? 1 : -1;
            }
          });
          this.movies = filtered;
          this.currentPage = 1;
        },

        clearFilters(updateHash = true) {
          this.searchQuery = '';
          this.selectedGenre = '';
          this.selectedCountry = '';
          this.selectedLanguage = '';
          this.selectedFranchise = '';
          this.selectedYear = '';
          this.filterAndSortMovies();
          if (updateHash) {
            window.location.hash = '';
          }
        },

        closeAllModals() {
          this.selectedMovie = null;
          this.selectedPerson = null;
          document.body.style.overflow = '';
        },

        fetchMovie(id) {
          this.isLoading = true;
          fetch(`/api/movie/${id}`)
            .then(res => res.json())
            .then(data => {
              this.closeAllModals();
              this.selectedMovie = data;
              this.activeTab = 'general';
              this.isLoading = false;
              document.body.style.overflow = 'hidden';
            })
            .catch(err => {
              console.error('Failed to load movie details:', err);
              this.isLoading = false;
              window.location.hash = '';
            });
        },

        fetchPerson(id) {
          this.isLoading = true;
          fetch(`/api/person/${id}`)
            .then(res => res.json())
            .then(data => {
              this.closeAllModals();
              this.selectedPerson = data;
              this.isLoading = false;
              document.body.style.overflow = 'hidden';
            })
            .catch(err => {
              console.error('Failed to load person details:', err);
              this.isLoading = false;
              window.location.hash = '';
            });
        },

        selectMovie(movie) {
          if (!movie || !movie.movie_id) return;
          window.location.hash = `/movie/${movie.movie_id}`;
        },

        selectPerson(person) {
          if (!person || !person.person_id) return;
          window.location.hash = `/person/${person.person_id}`;
        },

        closeMovie(updateHash = true) {
          this.selectedMovie = null;
          if (!this.selectedPerson) { document.body.style.overflow = ''; }
          if (updateHash) { window.location.hash = ''; }
        },

        closePerson(updateHash = true) {
          this.selectedPerson = null;
          if (!this.selectedMovie) { document.body.style.overflow = ''; }
          if (updateHash) { window.location.hash = ''; }
        },

        selectMovieFromPerson(movie) { this.selectMovie(movie); },

        get paginatedMovies() {
          const start = (this.currentPage - 1) * this.moviesPerPage;
          const end = start + this.moviesPerPage;
          return this.movies.slice(start, end);
        },

        get totalPages() { return Math.ceil(this.movies.length / this.moviesPerPage); },

        get years() {
          const yearSet = new Set();
          this.allMovies.forEach(movie => {
            if (movie.release_date) { yearSet.add(new Date(movie.release_date).getFullYear()); }
          });
          return Array.from(yearSet).sort((a, b) => b - a);
        },

        getImageUrl(item, type = 'poster') {
          if (!item) return 'https://placehold.co/500x750/0a0a0a/1a1a1a?text=NO+ASSET';
          let path;
          if (type === 'person') {
            path = item.headshot_path;
            if (!path) return 'https://placehold.co/200x300/0a0a0a/1a1a1a?text=NO+PHOTO';
            return `/media/${path}`;
          }
          switch(type) {
            case 'poster': path = item.poster_path; break;
            case 'backdrop': path = item.backdrop_path; break;
            default: path = item.poster_path;
          }
          if (!path) {
            return type === 'poster'
              ? 'https://placehold.co/500x750/0a0a0a/1a1a1a?text=NO+POSTER'
              : 'https://placehold.co/1280x720/0a0a0a/1a1a1a?text=NO+BACKDROP';
          }
          return `/media/${path}`;
        },

        formatDate(dateString) {
          if (!dateString) return 'N/A';
          const options = { year: 'numeric', month: 'long', day: 'numeric' };
          return new Date(dateString).toLocaleDateString(undefined, options);
        },

        formatRuntime(minutes) {
          if (!minutes) return 'N/A';
          const hours = Math.floor(minutes / 60);
          const mins = minutes % 60;
          return `${hours}h ${mins}m`;
        },

        formatFileSize(mb) {
          if (!mb) return 'N/A';
          if (mb < 1024) return `${mb} MB`;
          return `${(mb / 1024).toFixed(2)} GB`;
        },

        formatBitrate(kbps) {
          if (!kbps) return 'N/A';
          if (kbps < 1000) return `${kbps} kbps`;
          return `${(kbps / 1000).toFixed(1)} Mbps`;
        }
      }));
    });
  </script>
</body>
</html>
