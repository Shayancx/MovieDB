-- PostgreSQL schema for personal movie collection
-- Revised 2025-07-11 with:
--   • reverse-lookup indexes on junction tables
--   • strict ISO code enforcement (char(2), no “Unknown” language)
--   • ENUMs for file_format, subtitle_format, aspect_ratio, audio_channels
--

------------------------------------------------------------------
-- Session-wide settings
------------------------------------------------------------------
SET statement_timeout                        = 0;
SET lock_timeout                             = 0;
SET idle_in_transaction_session_timeout      = 0;
SET client_encoding                          = 'UTF8';
SET standard_conforming_strings              = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies                    = false;
SET xmloption                                = content;
SET client_min_messages                      = warning;
SET row_security                             = off;

------------------------------------------------------------------
-- Extensions
------------------------------------------------------------------
CREATE EXTENSION IF NOT EXISTS pg_trgm     WITH SCHEMA public;
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;

COMMENT ON EXTENSION pg_trgm     IS 'text similarity measurement and index searching based on trigrams';
COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';

------------------------------------------------------------------
-- ENUM types replacing free-text fields
------------------------------------------------------------------
CREATE TYPE public.file_format_enum      AS ENUM ('MKV','MP4','MOV','AVI','M2TS');
CREATE TYPE public.subtitle_format_enum  AS ENUM ('SRT','ASS','PGS','VOBSUB');
CREATE TYPE public.aspect_ratio_enum     AS ENUM ('1.33','1.66','1.78','1.85','2.00','2.20','2.35','2.39');
CREATE TYPE public.audio_channels_enum   AS ENUM ('Mono','Stereo','2.1','4.0','5.1','6.1','7.1','Atmos','DTS:X');

------------------------------------------------------------------
-- Trigger helper functions
------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.update_updated_at_column() RETURNS trigger
LANGUAGE plpgsql AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;

CREATE OR REPLACE FUNCTION public.maintain_full_name_consistency() RETURNS trigger
LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.first_name IS NOT NULL AND NEW.last_name IS NOT NULL THEN
        NEW.full_name := NEW.first_name || ' ' || NEW.last_name;
    END IF;
    RETURN NEW;
END;
$$;

------------------------------------------------------------------
-- Lookup tables
------------------------------------------------------------------
CREATE TABLE public.countries (
    country_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country_code char(2)  NOT NULL,
    country_name varchar(100),
    CONSTRAINT countries_country_code_key UNIQUE (country_code),
    CONSTRAINT chk_country_code_len CHECK (length(country_code) = 2)
);

CREATE TABLE public.languages (
    language_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    language_code varchar(10) NOT NULL,
    language_name varchar(100),
    CONSTRAINT languages_language_code_key UNIQUE (language_code),
    CONSTRAINT chk_language_code_len CHECK (length(language_code) BETWEEN 2 AND 10)
);

CREATE TABLE public.video_codecs (
    codec_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codec_name varchar(50) NOT NULL UNIQUE
);

CREATE TABLE public.audio_codecs (
    codec_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    codec_name varchar(50) NOT NULL UNIQUE
);

CREATE TABLE public.video_resolutions (
    resolution_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    resolution_name varchar(20) NOT NULL UNIQUE,
    width_pixels    integer,
    height_pixels   integer,
    CONSTRAINT chk_resolution_pixels_positive CHECK (
        (width_pixels  IS NULL OR width_pixels  > 0) AND
        (height_pixels IS NULL OR height_pixels > 0)
    )
);

CREATE TABLE public.source_media_types (
    source_type_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_type_name varchar(50) NOT NULL UNIQUE
);

CREATE TABLE public.credit_types (
    credit_type_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    credit_type_name varchar(50) NOT NULL UNIQUE
);

CREATE TABLE public.franchises (
    franchise_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    franchise_name varchar(255) NOT NULL UNIQUE,
    description    text
);

CREATE TABLE public.genres (
    genre_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(100) NOT NULL UNIQUE
);

CREATE TABLE public.role_types (
    role_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_name    varchar(50) NOT NULL UNIQUE
);

------------------------------------------------------------------
-- Core entities
------------------------------------------------------------------
CREATE TABLE public.people (
    person_id      integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name      varchar(255) NOT NULL,
    first_name     varchar(100),
    last_name      varchar(100),
    tmdb_person_id integer,
    headshot_path  text,
    created_at     timestamptz DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT people_tmdb_person_id_key UNIQUE (tmdb_person_id),
    CONSTRAINT people_full_name_tmdb_person_id_key UNIQUE (full_name, tmdb_person_id)
);

CREATE TABLE public.movies (
    movie_id        integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_name      varchar(255) NOT NULL,
    original_title  varchar(255),
    release_date    date,
    description     text,
    runtime_minutes integer,
    imdb_id         varchar(20),
    tmdb_id         integer,
    rating          numeric(2,1),
    franchise_id    integer REFERENCES public.franchises(franchise_id) ON DELETE SET NULL,
    poster_path     text,
    backdrop_path   text,
    logo_path       text,
    notes           text,
    created_at      timestamptz DEFAULT CURRENT_TIMESTAMP,
    updated_at      timestamptz DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT movies_rating_check          CHECK (rating IS NULL OR (rating >= 0 AND rating <= 10)),
    CONSTRAINT movies_runtime_minutes_check CHECK (runtime_minutes IS NULL OR runtime_minutes > 0),
    CONSTRAINT movies_imdb_id_key UNIQUE (imdb_id),
    CONSTRAINT movies_tmdb_id_key UNIQUE (tmdb_id)
);

------------------------------------------------------------------
-- Media files
------------------------------------------------------------------
CREATE TABLE public.movie_files (
    file_id             integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id            integer NOT NULL REFERENCES public.movies(movie_id) ON DELETE CASCADE,
    file_name           varchar(500) NOT NULL,
    file_path           text NOT NULL UNIQUE,
    added_to_library    timestamptz DEFAULT CURRENT_TIMESTAMP,
    file_format         public.file_format_enum,
    file_size_mb        integer,
    resolution_id       integer REFERENCES public.video_resolutions(resolution_id) ON DELETE SET NULL,
    video_bitrate_kbps  integer,
    video_codec_id      integer REFERENCES public.video_codecs(codec_id) ON DELETE SET NULL,
    frame_rate_fps      real,
    aspect_ratio        public.aspect_ratio_enum,
    duration_minutes    integer,
    source_media_type_id integer REFERENCES public.source_media_types(source_type_id) ON DELETE SET NULL,
    checksum_sha256     text,
    subtitle_embedded   boolean DEFAULT false,
    subtitle_external   boolean DEFAULT false,
    CONSTRAINT chk_file_size_positive CHECK (file_size_mb IS NULL OR file_size_mb > 0)
);

CREATE TABLE public.movie_file_audio_tracks (
    track_id       integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_id        integer NOT NULL REFERENCES public.movie_files(file_id) ON DELETE CASCADE,
    audio_codec_id integer REFERENCES public.audio_codecs(codec_id) ON DELETE SET NULL,
    bitrate_kbps   integer,
    channels       public.audio_channels_enum,
    language_id    integer REFERENCES public.languages(language_id) ON DELETE SET NULL,
    track_order    integer NOT NULL,
    CONSTRAINT chk_track_order_positive CHECK (track_order > 0)
);

CREATE TABLE public.movie_file_subtitles (
    subtitle_id     integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_id         integer NOT NULL REFERENCES public.movie_files(file_id) ON DELETE CASCADE,
    language_id     integer NOT NULL REFERENCES public.languages(language_id) ON DELETE RESTRICT,
    is_embedded     boolean DEFAULT false,
    is_external     boolean DEFAULT false,
    subtitle_format public.subtitle_format_enum,
    track_order     integer
);

------------------------------------------------------------------
-- Credit & linkage tables
------------------------------------------------------------------
CREATE TABLE public.movie_cast (
    cast_id        integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    movie_id       integer NOT NULL REFERENCES public.movies(movie_id)  ON DELETE CASCADE,
    person_id      integer NOT NULL REFERENCES public.people(person_id) ON DELETE CASCADE,
    character_name varchar(255) NOT NULL,
    billing_order  integer NOT NULL CHECK (billing_order > 0),
    role_type_id   integer REFERENCES public.role_types(role_type_id) ON DELETE SET NULL,
    CONSTRAINT unique_movie_person_character UNIQUE (movie_id, person_id, character_name)
);

CREATE TABLE public.movie_directors (
    movie_id integer NOT NULL REFERENCES public.movies(movie_id)  ON DELETE CASCADE,
    person_id integer NOT NULL REFERENCES public.people(person_id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, person_id)
);

CREATE TABLE public.movie_writers (
    movie_id       integer NOT NULL REFERENCES public.movies(movie_id)  ON DELETE CASCADE,
    person_id      integer NOT NULL REFERENCES public.people(person_id) ON DELETE CASCADE,
    credit_type_id integer NOT NULL REFERENCES public.credit_types(credit_type_id) ON DELETE RESTRICT,
    PRIMARY KEY (movie_id, person_id, credit_type_id)
);

CREATE TABLE public.movie_genres (
    movie_id integer NOT NULL REFERENCES public.movies(movie_id) ON DELETE CASCADE,
    genre_id integer NOT NULL REFERENCES public.genres(genre_id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, genre_id)
);

CREATE TABLE public.movie_languages (
    movie_id    integer NOT NULL REFERENCES public.movies(movie_id)    ON DELETE CASCADE,
    language_id integer NOT NULL REFERENCES public.languages(language_id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, language_id)
);

CREATE TABLE public.movie_countries (
    movie_id   integer NOT NULL REFERENCES public.movies(movie_id)  ON DELETE CASCADE,
    country_id integer NOT NULL REFERENCES public.countries(country_id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, country_id)
);

CREATE TABLE public.certifications (
    certification_id   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    certification_code varchar(255) NOT NULL,
    country_id         integer NOT NULL REFERENCES public.countries(country_id) ON DELETE RESTRICT,
    CONSTRAINT unique_certification_country UNIQUE (certification_code, country_id)
);

CREATE TABLE public.movie_certifications (
    movie_id         integer NOT NULL REFERENCES public.movies(movie_id) ON DELETE CASCADE,
    certification_id integer NOT NULL REFERENCES public.certifications(certification_id) ON DELETE CASCADE,
    PRIMARY KEY (movie_id, certification_id)
);

------------------------------------------------------------------
-- Migrations bookkeeping
------------------------------------------------------------------
CREATE TABLE public.schema_migrations (
    version varchar(255) PRIMARY KEY
);

------------------------------------------------------------------
-- Triggers
------------------------------------------------------------------
CREATE TRIGGER update_movies_updated_at
BEFORE UPDATE ON public.movies
FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER maintain_people_full_name
BEFORE INSERT OR UPDATE ON public.people
FOR EACH ROW EXECUTE FUNCTION public.maintain_full_name_consistency();

------------------------------------------------------------------
-- Indexes
------------------------------------------------------------------
-- Text search
CREATE INDEX idx_movies_name_trgm   ON public.movies USING gin (movie_name public.gin_trgm_ops);

-- Common filters
CREATE INDEX idx_movies_release_date ON public.movies (release_date);
CREATE INDEX idx_movies_franchise_id ON public.movies (franchise_id);

-- Ordering
CREATE INDEX idx_cast_billing ON public.movie_cast (movie_id, billing_order);

-- Lookup by person
CREATE INDEX idx_people_full_name ON public.people (full_name);
CREATE INDEX idx_movie_cast_person ON public.movie_cast (person_id);
CREATE INDEX idx_movie_directors_person ON public.movie_directors (person_id);
CREATE INDEX idx_movie_writers_person   ON public.movie_writers   (person_id);

-- File relationships
CREATE INDEX idx_movie_files_movie                ON public.movie_files (movie_id);
CREATE INDEX idx_movie_file_audio_tracks_file_id  ON public.movie_file_audio_tracks (file_id);
CREATE INDEX idx_movie_file_subtitles_file_id     ON public.movie_file_subtitles    (file_id);

-- ===== NEW reverse-lookup indexes =====
CREATE INDEX idx_movie_genres_genre_id         ON public.movie_genres         (genre_id);
CREATE INDEX idx_movie_languages_language_id   ON public.movie_languages      (language_id);
CREATE INDEX idx_movie_countries_country_id    ON public.movie_countries      (country_id);
CREATE INDEX idx_movie_certifications_cert_id  ON public.movie_certifications (certification_id);

------------------------------------------------------------------
-- Seed data
------------------------------------------------------------------
-- Countries (ISO-3166-1 alpha-2)
INSERT INTO public.countries (country_code, country_name) VALUES
('US','United States'),
('GB','United Kingdom'),
('CA','Canada'),
('AU','Australia'),
('NZ','New Zealand'),
('IE','Ireland'),
('DE','Germany'),
('FR','France'),
('IT','Italy'),
('ES','Spain'),
('PT','Portugal'),
('BR','Brazil'),
('MX','Mexico'),
('AR','Argentina'),
('JP','Japan'),
('CN','China'),
('KR','South Korea'),
('IN','India'),
('RU','Russia'),
('NL','Netherlands'),
('BE','Belgium'),
('SE','Sweden'),
('NO','Norway'),
('DK','Denmark'),
('FI','Finland'),
('PL','Poland'),
('CZ','Czech Republic'),
('HU','Hungary'),
('RO','Romania'),
('BG','Bulgaria'),
('GR','Greece'),
('TR','Turkey'),
('IL','Israel'),
('TH','Thailand'),
('ID','Indonesia'),
('MY','Malaysia'),
('SG','Singapore'),
('PH','Philippines'),
('VN','Vietnam'),
('HK','Hong Kong'),
('TW','Taiwan'),
('CH','Switzerland'),
('AT','Austria'),
('ZA','South Africa'),
('EG','Egypt'),
('SA','Saudi Arabia'),
('AE','United Arab Emirates'),
('CL','Chile'),
('CO','Colombia'),
('PE','Peru'),
('VE','Venezuela'),
('UA','Ukraine'),
('HR','Croatia'),
('RS','Serbia'),
('SI','Slovenia'),
('SK','Slovakia'),
('LT','Lithuania'),
('LV','Latvia'),
('EE','Estonia'),
('IS','Iceland'),
('LU','Luxembourg'),
('MT','Malta'),
('CY','Cyprus')
ON CONFLICT (country_code) DO NOTHING;

-- Languages (ISO-639-1 + variants) – no "Unknown"
INSERT INTO public.languages (language_code, language_name) VALUES
('en','English'),
('en-US','English (US)'),
('en-GB','English (UK)'),
('fr','French'),
('fr-FR','French (FR)'),
('fr-CA','French (CA)'),
('de','German'),
('es','Spanish'),
('es-ES','Spanish (ES)'),
('es-MX','Spanish (MX)'),
('es-419','Spanish (Latin America)'),
('it','Italian'),
('pt','Portuguese'),
('pt-BR','Portuguese (BR)'),
('pt-PT','Portuguese (PT)'),
('ja','Japanese'),
('ko','Korean'),
('zh','Chinese'),
('zh-CN','Mandarin (Simplified)'),
('zh-TW','Mandarin (Traditional)'),
('zh-Hant','Mandarin (Hant)'),
('yue','Cantonese'),
('yue-Hant','Cantonese (Hant)'),
('ru','Russian'),
('ar','Arabic'),
('hi','Hindi'),
('nl','Dutch'),
('sv','Swedish'),
('no','Norwegian'),
('nb','Norwegian Bokmål'),
('nn','Norwegian Nynorsk'),
('da','Danish'),
('fi','Finnish'),
('pl','Polish'),
('cs','Czech'),
('hu','Hungarian'),
('ro','Romanian'),
('bg','Bulgarian'),
('el','Greek'),
('tr','Turkish'),
('he','Hebrew'),
('th','Thai'),
('vi','Vietnamese'),
('id','Indonesian'),
('ms','Malay'),
('tl','Tagalog'),
('uk','Ukrainian'),
('hr','Croatian'),
('sr','Serbian'),
('sl','Slovenian'),
('sk','Slovak'),
('lt','Lithuanian'),
('lv','Latvian'),
('et','Estonian'),
('is','Icelandic'),
('ga','Irish'),
('cy','Welsh'),
('gd','Scottish Gaelic'),
('eu','Basque'),
('ca','Catalan'),
('gl','Galician'),
('sq','Albanian'),
('mk','Macedonian'),
('bs','Bosnian'),
('mt','Maltese'),
('af','Afrikaans'),
('sw','Swahili'),
('am','Amharic'),
('bn','Bengali'),
('gu','Gujarati'),
('kn','Kannada'),
('ml','Malayalam'),
('mr','Marathi'),
('ne','Nepali'),
('pa','Punjabi'),
('si','Sinhala'),
('ta','Tamil'),
('te','Telugu'),
('ur','Urdu'),
('fa','Persian'),
('kk','Kazakh'),
('ky','Kyrgyz'),
('uz','Uzbek'),
('az','Azerbaijani'),
('ka','Georgian'),
('hy','Armenian'),
('mn','Mongolian'),
('bo','Tibetan'),
('km','Khmer'),
('lo','Lao'),
('my','Burmese')
ON CONFLICT (language_code) DO NOTHING;

-- Video codecs
INSERT INTO public.video_codecs (codec_name) VALUES
('H.264'),
('H.265'),
('HEVC'),
('AV1'),
('VP9'),
('VP8'),
('MPEG-2'),
('MPEG-4'),
('DivX'),
('XviD'),
('WMV'),
('ProRes'),
('DNxHD'),
('DNxHR'),
('Theora'),
('VC-1')
ON CONFLICT (codec_name) DO NOTHING;

-- Audio codecs
INSERT INTO public.audio_codecs (codec_name) VALUES
('AAC'),
('MP3'),
('DTS'),
('DTS-HD'),
('DTS-HD MA'),
('DTS:X'),
('Dolby Digital'),
('Dolby Digital Plus'),
('Dolby TrueHD'),
('Dolby Atmos'),
('FLAC'),
('PCM'),
('LPCM'),
('Opus'),
('Vorbis'),
('AC3'),
('E-AC3'),
('WMA'),
('ALAC'),
('APE'),
('WAV')
ON CONFLICT (codec_name) DO NOTHING;

-- Video resolutions
INSERT INTO public.video_resolutions (resolution_name, width_pixels, height_pixels) VALUES
('360p', 640, 360),
('480p', 854, 480),
('576p', 1024, 576),
('720p', 1280, 720),
('900p', 1600, 900),
('1080p', 1920, 1080),
('1440p', 2560, 1440),
('4K', 3840, 2160),
('5K', 5120, 2880),
('6K', 6144, 3456),
('8K', 7680, 4320),
('IMAX', 4096, 3072)
ON CONFLICT (resolution_name) DO NOTHING;

-- Source media types
INSERT INTO public.source_media_types (source_type_name) VALUES
('Blu-ray'),
('4K Blu-ray'),
('DVD'),
('Digital'),
('Web-DL'),
('WEB-Rip'),
('TV-Rip'),
('HDTV'),
('Cam'),
('Telesync'),
('Telecine'),
('Screener'),
('VOD'),
('iTunes'),
('Amazon'),
('Netflix'),
('Disney+'),
('HBO Max'),
('Theatrical')
ON CONFLICT (source_type_name) DO NOTHING;

-- Credit types
INSERT INTO public.credit_types (credit_type_name) VALUES
('Screenplay'),
('Story'),
('Adaptation'),
('Original Story'),
('Novel'),
('Characters'),
('Treatment'),
('Book'),
('Play'),
('Article'),
('Comic Book'),
('Short Story'),
('Based on'),
('Concept'),
('Idea')
ON CONFLICT (credit_type_name) DO NOTHING;

-- Role types
INSERT INTO public.role_types (role_name) VALUES
('Lead'),
('Supporting'),
('Cameo'),
('Voice'),
('Narrator'),
('Uncredited'),
('Special Appearance'),
('Guest Star'),
('Archive Footage'),
('Motion Capture'),
('Stunt Double'),
('Body Double')
ON CONFLICT (role_name) DO NOTHING;

-- Genres
INSERT INTO public.genres (genre_name) VALUES
('Action'),
('Adventure'),
('Animation'),
('Comedy'),
('Crime'),
('Documentary'),
('Drama'),
('Family'),
('Fantasy'),
('History'),
('Horror'),
('Music'),
('Mystery'),
('Romance'),
('Science Fiction'),
('TV Movie'),
('Thriller'),
('War'),
('Western'),
('Biography'),
('Film-Noir'),
('Game-Show'),
('Musical'),
('News'),
('Reality-TV'),
('Sport'),
('Talk-Show'),
('Adult')
ON CONFLICT (genre_name) DO NOTHING;

------------------------------------------------------------------
-- View for consolidation
------------------------------------------------------------------
CREATE OR REPLACE VIEW public.movie_details AS
SELECT
    m.movie_id,
    m.movie_name,
    m.original_title,
    m.release_date,
    m.description,
    m.runtime_minutes,
    m.imdb_id,
    m.tmdb_id,
    m.rating,
    f.franchise_name,
    m.poster_path,
    m.backdrop_path,
    m.logo_path,
    m.notes,
    m.created_at,
    m.updated_at,
    COALESCE(
        ARRAY_AGG(DISTINCT g.genre_name) FILTER (WHERE g.genre_name IS NOT NULL),
        ARRAY[]::varchar[]
    ) AS genres,
    COALESCE(
        ARRAY_AGG(DISTINCT cert.certification_code) FILTER (WHERE cert.certification_code IS NOT NULL),
        ARRAY[]::varchar[]
    ) AS certifications,
    COALESCE(
        ARRAY_AGG(DISTINCT lang.language_name) FILTER (WHERE lang.language_name IS NOT NULL),
        ARRAY[]::varchar[]
    ) AS languages,
    COALESCE(
        ARRAY_AGG(DISTINCT ctry.country_name) FILTER (WHERE ctry.country_name IS NOT NULL),
        ARRAY[]::varchar[]
    ) AS countries,
    COALESCE(
        (SELECT ARRAY_AGG(p.full_name)
         FROM public.movie_directors md
         JOIN public.people p USING (person_id)
         WHERE md.movie_id = m.movie_id),
        ARRAY[]::varchar[]
    ) AS directors,
    (SELECT COUNT(*) FROM public.movie_files mf WHERE mf.movie_id = m.movie_id) AS file_count
FROM public.movies m
LEFT JOIN public.franchises f             ON f.franchise_id   = m.franchise_id
LEFT JOIN public.movie_genres mg          ON mg.movie_id      = m.movie_id
LEFT JOIN public.genres g                 ON g.genre_id       = mg.genre_id
LEFT JOIN public.movie_languages ml       ON ml.movie_id      = m.movie_id
LEFT JOIN public.languages lang           ON lang.language_id = ml.language_id
LEFT JOIN public.movie_countries mc       ON mc.movie_id      = m.movie_id
LEFT JOIN public.countries ctry           ON ctry.country_id  = mc.country_id
LEFT JOIN public.movie_certifications mct ON mct.movie_id     = m.movie_id
LEFT JOIN public.certifications cert      ON cert.certification_id = mct.certification_id
GROUP BY m.movie_id, f.franchise_name;