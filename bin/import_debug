#!/usr/bin/env ruby
# frozen_string_literal: true

ENV['DEBUG'] = '1'  # Enable debug logging
ENV['RUBYOPT'] = '-W0'  # Suppress warnings

require_relative '../app/services/tmdb_movie_importer'
require_relative '../app/services/tmdb_series_importer'
require_relative '../app/services/pretty_logger'
require_relative '../app/services/import_config'
require_relative '../app/services/tui'
include ImportConfig

if __FILE__ == $PROGRAM_NAME
  unless system('command -v mediainfo > /dev/null 2>&1')
    PrettyLogger.error("'mediainfo' command-line tool not found. Please install it first.")
    exit 1
  end

  # Check TMDB API key
  unless ENV['TMDB_API_KEY'] && !ENV['TMDB_API_KEY'].empty?
    PrettyLogger.error("TMDB_API_KEY environment variable not set!")
    exit 1
  end
  
  PrettyLogger.info("Using TMDB API Key: #{ENV['TMDB_API_KEY'][0..5]}...")

  movie_directory = ARGV[0]
  unless movie_directory && File.directory?(movie_directory)
    puts "Usage: #{$PROGRAM_NAME} [path_to_movie_directory]"
    exit 1
  end

  # Check storage directory
  storage_dir = File.expand_path('../storage/media', __dir__)
  unless File.writable?(storage_dir)
    PrettyLogger.error("Storage directory not writable: #{storage_dir}")
    PrettyLogger.info("Run: chmod -R 755 #{storage_dir}")
    exit 1
  end

  importer = TMDBMovieImporter.new
  
  interrupted = false
  
  # Set up signal handlers
  ['INT', 'TERM'].each do |signal|
    Signal.trap(signal) do
      unless interrupted
        interrupted = true
        puts "\n\n[\e[33mWARN\e[0m] Import interrupted by user. Waiting for downloads..."
        Thread.new { 
          importer&.shutdown
          exit(130)
        }
      end
    end
  end

  begin
    puts "\e[36m╔════════════════════════════════════════╗\e[0m"
    puts "\e[36m║    TMDB Movie Importer (DEBUG)        ║\e[0m"
    puts "\e[36m╚════════════════════════════════════════╝\e[0m"
    puts
    puts "Importing from:   \e[33m#{File.absolute_path(movie_directory)}\e[0m"
    puts "Media storage:    \e[33m#{MEDIA_BASE_DIR}\e[0m"
    puts "Background Threads: \e[33m#{MAX_BG_THREADS}\e[0m"
    puts "Debug Mode: \e[32mENABLED\e[0m"
    puts

    importer.import_from_directory(movie_directory)
  rescue StandardError => e
    PrettyLogger.error("A fatal error occurred: #{e.message}")
    PrettyLogger.error(e.backtrace.join("\n"))
    TUI.finish if TUI.active?
    exit 1
  ensure
    unless interrupted
      importer&.shutdown
      PrettyLogger.display_summary
    end
  end
end
